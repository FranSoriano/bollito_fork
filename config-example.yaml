
# path or URL to sample sheet (TSV format, columns: sample, condition, ...).
samples: samples.tsv
# path or URL to sequencing unit sheet (TSV format, columns: sample, unit, fq1, fq2).
# Units are technical replicates (e.g. lanes, or resequencing of the same biological.
# sample).
units: units.tsv

outdir: "/test/out"
logdir: "/test/log"

# Genomic references (gtf and STAR index).
ref:
    annotation: "/scratch/resources/annotations/m_musculus/gencode.vM20.annotation.gtf"
    # if a fasta file is provided, the genome index will be generated automatically
    fasta: "/tmp/genome.fasta"
    # location for the genome index (will be used if it exists, otherwise generated from the fasta file)
    idx: "/scratch/resources/genomes/m_musculus/GRCm38.primary_assembly.genome_idx_star_2.7.3a"

# Barcodes whitelist
# This depends on the 10X chemist (V1, V2 or V3).
whitelist: "/opt/bioinfo/cellranger/software/3.0.2/cellranger-cs/3.0.2/lib/python/cellranger/barcodes/737K-august-2016.txt"  

#Default computational parameters per rule.
rules:
    default:
        res:
            threads: 1
            mem: 8000
            walltime: 480
# Cut adaptors
    cutadapt:
        disabled: true
        params: "-G GCAGTGGTATCAACGCAGAGTACATGGG -m 16"
# Fastq screen. Screen a library of sequences in fastq format against a set of sequence DBs (of other organisms) to check its composition.
    fastq_screen_indexes:
        threads: 8
        outdir: "res"
    fastq_screen:
        threads: 8
        disabled: true
    merge:
        res:
            mem: 32000
# STAR alignment
# UMI length is related to 10X chemist.
# Other parameters might be modified depending on the user needs.
    star_index:
        res:
            threads: 8
            mem: 64000
    star:
        params: "--soloType Droplet --soloFeatures Gene Velocyto Transcript3p --outFilterMultimapNmax 50 --winAnchorMultimapNmax 50 --alignEndsType EndToEnd --outReadsUnmapped Fastx --soloUMIlen 10 --outSAMtype BAM SortedByCoordinate --outSAMattributes NH HI nM AS CR UR CB UB GX GN sS sQ sM"
        res:
            threads: 8
            mem: 64000
# Quality control.
    fastqc:
        res:
            threads: 4
    rseqc_junction_saturation:
        res:
            mem: 8000
    rseqc_readdup:
        res:
            mem: 24000
 # MultiQC. Aggregate results from FastQC and Rseqc analyses into a single report.
    multiqc:
        params: "--config res/config/multiqc_config.yaml"
# Seurat analysis
# step 1. Examine your results with the most commonly used single-cell QC metrics.
# project_name: define the name of your project.
# meta_path: absolute path to meta information for each sample.
# min_cell_per_gene: number of cells that must express a gene for the gene to pass the filter.
    seurat_qc:
        params:
            project_name: "451LU"
            meta_path: metadata.tsv
            min_cells_per_gene: 1
        res:
            mem: 3000
# step 2. Implement your filters in order to get quality cells using the information gathered in step 1.
# These quality filters are the following:
# Minimum (min_feat) and maximum (max_feat) number of unique genes detected per cell.
# Minimum (min_count) and maximum (max_count) number of counts detected per cell.
# Minimum percentaje of reads mapping to the mitochondrial genome (mit_pct, recommended 5).
# Minimum percentaje of reads mapping to the ribosomal genome (ribo_pct, recommended 40).
# Leave empty variables in case you do not want to filter.
# Empty "min_feat" and "min_count" indicate not to perform the filter. Use 0 is no bottom threshold is desired.
# Empty "max_feat" and "max_count" indicate no upper threshold.
    seurat_postqc:
        params:
            min_feat: 500
            max_feat: 2500 
            min_count: 
            max_count:  
            mit_pct: 10
            ribo_pct: 40
        res:
            mem: 4000

# step 2.1. Bollito allows you to filter out cells based on positive or negative marker gene(s).
# Parameters:
# gene: input a gene or list of genes (i.e. "Epcam").
# threshold: expression-based filtering criteria (i.e. 0).
# filter_out: if true, cells will be filtered out based on the specified threshold; cells with higher expression values will be kept. If false, cells with the will be kept.
    seurat_filter:
        params:
            gene: 
            threshold: 
            filter_out: 
        res:
            mem: 4000
# step 3. After normalization, generates a Jackstrawplot as well as an elbow plot.
# Examine these plots in order to select the number of principal components used in the next steps.
# Parameters:
# normalization: type of normalization performed ("SCT" or "standard").
# regress_out: True or False depending if you want to regress out biological or technical effects stored in the metadata table (from Seurat object).
# vars_to_regress: string (var = 1) or list (vars => 2) of varibles you want to regress. It / they must be stored in the metadata table. 
    seurat_normalization:
        params:
            normalization: "SCT"
            regress_out: True
            vars_to_regress: "percent.mt"
        res:
            mem: 16000
# step 3B Integration. This rule is equivalent to the normalization, but it creates the integrated object. 
# OPTIONAL step.
# Parameters:
# norm_type: this integration depends on the normalization applied (standard or SCT).
# vars_to_regress: some variables can be regressed out to minimize their effect on the samples. It needs to be written in a python list format (more than one variable).
    seurat_integration:
        params:
            perform: True
            norm_type: "SCT"
            vars_to_regress: "percent.mt"
        res:
            mem: 32000
# step 4. Clustering of your data.
# Paramters:
# random_seed: ensures the reproducibility of your analysis.
# principal_components: number of components used.
# resolutions: the resolution(s) values will set the granularity of the clustering (typicaly between 0.4-1.2).
    seurat_find_clusters:
        params:
            random_seed: 8458
            principal_components: 10
            resolutions: [0.2, 0.4, 0.8, 1.2, 1.6]
        res:
            mem: 8000
# step 5. Marker and Differentially expressed genes calculation.
# Parameters:
# selected_res: sets the resolution to be used in the downstream analysis.
    seurat_degs:
        params:
            selected_res: 0.4
        res:
            mem: 64000
# step 6. Gene set scoring will calculate the average expression levels of each specified regulatory program.
# Parameters:
# geneset_collection: input a .gmt file with the  gene set or gene set collections to evaluate.
    seurat_gs:
        params:
            geneset_collection:
        res:
            mem: 10000
# step 7. Slingshot. Trajectory inference step. Lineages and curves that goes through the clusters are calculated.
# OPTIONAL step.
# Parameters:
# selected_res: resolution (number of clusters) chosen from Seurat object to perform the trajectory analysis. 
# start_clus: cluster from where the curve or lineage starts (optional).
# start_clus: last cluster of the curve or lienage (optional).
# n_var_genes: n top variable genes selected to fit the model.
# n_plotted_genes: n top variable genes to plot in the heatmap.
    slingshot:
        params:
            perform: True
            selected_res: 0.4
            start_clus: False
            end_clus: False 
            n_var_genes: 1000
            n_plotted_genes: 50
        res: 
            mem: 8000
# step 8. Vision. Cell and cluster functional analysis based on molecular signatures.
# OPTIONAL step.
# Parameters:
# mol_signatures: path to molecular signatures gmt file 
# meta_columns: metadata information that is kept from Seurat object. It needs to be written in a python list format (more than one variable).
# selected_res: resolution (number of clusters) chosen from Seurat object to be added as metadata.
# n_cores: cores given for the analysis.
# use_integrated: set True if integration is perform, False if not. 
    vision:
        params:
            perform: True
            mol_signatures: "/home/lgjimeno/resources/h.all.v7.0.symbols.gmt"
            meta_columns: ["nCount_RNA", "nFeature_RNA", "percent.mt", "percent.ribo"]
            n_cores: 12
            selected_res: 0.4
        res:
            mem: 16000 
# step 9. Velocyto. RNA velocity plots over single experiments samples.
# OPTIONAL step.
# selected_res: resolution (number of clusters) chosen to represent in the velocity plot.
    velocyto:
        params:
            perform: True
            selected_res: 0.4
        res: 
            mem: 16000
